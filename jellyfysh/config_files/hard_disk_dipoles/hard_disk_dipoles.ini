# JeLLFysh - a Python application for all-atom event-chain Monte Carlo - https://github.com/jellyfysh
# Copyright (C) 2019, 2022 The JeLLyFysh organization
# (See the AUTHORS.md file for the full list of authors.)
#
# This file is part of JeLLyFysh.
#
# JeLLyFysh is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# JeLLyFysh is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with JeLLyFysh in the LICENSE file.
# If not, see <https://www.gnu.org/licenses/>.
#
# If you use JeLLyFysh in published work, please cite the following reference (see [Hoellmer2020] in References.bib):
# Philipp Hoellmer, Liang Qin, Michael F. Faulkner, A. C. Maggs, and Werner Krauth,
# JeLLyFysh-Version1.0 -- a Python application for all-atom event-chain Monte Carlo,
# Computer Physics Communications, Volume 253, 107168 (2020), https://doi.org/10.1016/j.cpc.2020.107168.
#
[Run]
mediator = single_process_mediator
setting = hypercubic_setting

[HypercubicSetting]
system_length = 12.836
beta = 1
dimension = 2

[SingleProcessMediator]
state_handler = tree_state_handler
scheduler = heap_scheduler
activator = tag_activator
input_output_handler = input_output_handler

[TagActivator]
taggers =
    sphere (factor_type_map_in_state_tagger),
    dipole (factor_type_map_in_state_tagger),
    polarization_sampling (no_in_state_tagger),
    end_of_chain (active_global_state_in_state_tagger),
    end_of_run (no_in_state_tagger),
    start_of_run (no_in_state_tagger)

[Sphere]
create = sphere, dipole
trash = sphere, dipole
event_handler = hard_sphere_event_handler (two_leaf_unit_event_handler)
number_event_handlers = 160
factor_type_maps = factor_type_maps

[HardSphereEventHandler]
potential = hard_sphere_potential

[HardSpherePotential]
radius = 0.476190476190476

[FactorTypeMaps]
filename = config_files/factor_set_files/factor_set_hard_disk_dipoles.txt

[Dipole]
create = sphere, dipole
trash = sphere, dipole
event_handler = hard_dipole_event_handler (two_leaf_unit_event_handler)
number_event_handlers = 1
factor_type_maps = factor_type_maps

[HardDipoleEventHandler]
potential = hard_dipole_potential

[HardDipolePotential]
minimum_separation = 0.952380952380952
maximum_separation = 1.047619047619048

[PolarizationSampling]
create = polarization_sampling
trash = polarization_sampling
event_handler = polarization_sampling_event_handler (fixed_interval_sampling_event_handler)

[PolarizationSamplingEventHandler]
sampling_interval = 10.01
output_handler = polarization_output_handler
first_event_time_zero = True

[EndOfChain]
create = end_of_chain, sphere, dipole
trash = end_of_chain, sphere, dipole
event_handler = single_independent_active_sequential_direction_end_of_chain_event_handler

[SingleIndependentActiveSequentialDirectionEndOfChainEventHandler]
chain_time = 6.0
delta_phi_degree = 20.0

[EndOfRun]
create = end_of_run
trash = end_of_chain, sphere, dipole, polarization_sampling, start_of_run, end_of_run
event_handler = final_time_end_of_run_event_handler

[FinalTimeEndOfRunEventHandler]
end_of_run_time = 15015000

[StartOfRun]
trash = start_of_run
create = sphere, dipole, polarization_sampling, end_of_chain, end_of_run
event_handler = initial_chain_start_of_run_event_handler

[InitialChainStartOfRunEventHandler]
initial_direction_of_motion = 0
speed = 1.0
initial_active_identifier = 0, 0

[TreeStateHandler]
physical_state = tree_physical_state
lifting_state = tree_lifting_state

[InputOutputHandler]
output_handlers = polarization_output_handler
input_handler = pdb_input_handler

[PdbInputHandler]
filename = config_files/hard_disk_dipoles/81dipoles_min0.952380952380952_max1.047619047619048.pdb
charge_values = electric_charge_values (charge_values)

[ElectricChargeValues]
charge_name = electric_charge
charge_values = 1, -1

[PolarizationOutputHandler]
filename = output/hard_disk_dipoles/Polarization_81Dipoles.dat
charge = electric_charge